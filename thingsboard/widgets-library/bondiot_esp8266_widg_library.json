{
  "widgetsBundle": {
    "alias": "mis_widgets",
    "title": "BondIoT-ESP8266-Widg_library",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "light_bulb_1",
      "name": "Light Bulb 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 9.5,
        "resources": [],
        "templateHtml": "<img id=\"myImage\" src=\"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\" width=\"100\" height=\"180\">\r\n",
        "templateCss": "#myImage {\r\n\r\n    top: 50%;\r\n     transform: translate(-50%, -50%);\r\n    position: absolute;\r\n  left: 50%;\r\n}",
        "controllerScript": "\n\n\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    var scope = self.ctx.$scope;\n    \n    \n    $('#myImage', self.ctx.$container).click(function(e){\n        if ( $('#myImage', self.ctx.$container)[0].src.includes(\"bulbon\"))\n        {\n        $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\"\n        requestChange(0,false);\n        }\n        else\n    {\n        $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulbon.gif\"\n        requestChange(0,true);\n    }\n    });\n    \n    function requestChange(g, value)\n    {\n\n        var method = settings.changeRequestMethod;\n    \n        var paramsBody = value;\n    \n        \n        var $injector = self.ctx.$injector;\n        let deviceService =self.ctx.deviceService;\n        \n        if (self.ctx.datasources.length > 0)\n        {\n        var dataKeyCounter = 0;\n        var entityId = self.ctx.datasources[0].entityId\n        \n            var requestBody = {\n                 method: method,\n                 params: paramsBody\n                 \n            }\n    \n       console.log(deviceService);\n        \n        \n        deviceService.sendOneWayRpcCommand(entityId, requestBody).subscribe((responseBody) => {});\n        }\n    }\n \n    \n\n\n}\n\nself.onDataUpdated = function() {\n \n \n console.log (self.ctx);\n    var settings = self.ctx.settings;\n    var value = 0;\n    \n    if (self.ctx.defaultSubscription.data.length > 0)\n    {\n        \n            if (self.ctx.defaultSubscription.data.length > 0)\n            {\n                if (self.ctx.defaultSubscription.data[0].data.length > 0)\n                    value = parseInt(self.ctx.defaultSubscription.data[0].data[0][1]);\n                    \n                if (value > 0)\n                {\n                    $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulbon.gif\"\n                }\n                else\n                {\n                    $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\"\n                }\n\n            }\n      \n        \n        \n    \n    }\n    \n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n\nself.onResize = function() {\n    if (self.ctx.width < parseInt(self.ctx.height) + 50 + \"px\")\n    {\n $('#myImage', self.ctx.$container)[0].style.width = self.ctx.width + \"px\";\n $('#myImage', self.ctx.$container)[0].style.height = \"auto\";\n    }\n else\n     {\n $('#myImage', self.ctx.$container)[0].style.width = \"auto\";\n $('#myImage', self.ctx.$container)[0].style.height = self.ctx.height + \"px\";\n    }\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"changeRequestMethod\"\n\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        \"changeRequestMethod\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Light Bulb 1\"}"
      }
    },
    {
      "alias": "switch_1",
      "name": "Switch-Abierta-Cerrada",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 9,
        "sizeY": 7.5,
        "resources": [
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch.css"
          },
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch.js"
          },
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch-onload.js"
          }
        ],
        "templateHtml": "<div class=\"checkbox-container\">\r\n\r\n\r\n    <input type=\"checkbox\" name=\"on-off-switch\" id=\"on-off-switch\" checked=\"\">\r\n</div>",
        "templateCss": ".on-off-switch\n{\n    \n    top: 50%;\n     transform:translate(-50%, -50%);\n     \n    position: absolute;\n  left: 50%;\n  \n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\nvar dg\nself.onInit = function() {\n    console.log(self.ctx);\n    var settings = self.ctx.settings;\n        dg = new DG.OnOffSwitch({\n            el:  $('#on-off-switch', self.ctx.$container),\n            height: settings.height || 150,\n            trackColorOn:settings.backgroundcolorOn || \"#6AFD8A\",\n            trackColorOff:settings.backgroundcolorOff || \"#666\",\n            trackBorderColor:'#555',\n            textColorOff:settings.textColorOff || \"#fff\",\n            textColorOn:settings.textColorOn || \"#fff\",\n            textOn:settings.textOn || \"ABIERTA\",\n            textOff:settings.textOff || \"CERRADA\",\n            listener:function(name, checked){\n            \n            \n            var method = settings.changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(checked);\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n                        /*.subscribe(\n                            function success(responseBody) {\n                                \n                            }\n                        );*/\n            }\n            \n        });\n        \n    //Set Value Mathod\n    var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n    \n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n\n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n    function requestStatus() {\n        \n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                        \n                       let value = (convertGetValue(responseBody)); \n                       \n                       if (value)\n                       {\n                       $('#on-off-switch', self.ctx.$container).checked = true;\n                       $('#on-off-switch', self.ctx.$container).value = true;\n                       dg.checked = true;\n                       \n                       }\n                        else\n                        {\n                        $('#on-off-switch', self.ctx.$container).checked = false;\n                        $('#on-off-switch', self.ctx.$container).click();\n                        }\n                    }\n                    );\n                }\n     \nconsole.log(self.ctx.defaultSubscription);\n\nif ((settings.retrieveValueMethod == \"Subscribe for attribute\") || (settings.retrieveValueMethod == \"Subscribe for timeseries\"))\n{\nvar type = 'timeseries'\nif (settings.retrieveValueMethod == \"Subscribe for attribute\")\n    type = 'attribute'\ndatasources = [\n        {  // datasource\n           type: 'entity',// type of the datasource. Can be \"function\" or \"entity\"\n           name: 'name', // name of the datasource (in case of \"entity\" usually Entity name)\n           aliasName: self.ctx.defaultSubscription.targetDeviceName, // name of the alias used to resolve this particular datasource Entity\n           entityName: self.ctx.defaultSubscription.targetDeviceName, // name of the Entity used as datasource\n           entityType: 'DEVICE', // datasource Entity type (for ex. \"DEVICE\", \"ASSET\", \"TENANT\", etc.)\n           entityId: self.ctx.defaultSubscription.targetDeviceId, // entity identificator presented as string uuid. \n           dataKeys: [ //  array of keys (Array<DataKey>) (attributes or timeseries) of the entity used to fetch data \n               { // dataKey\n                    name: settings.updateValueKey, // the name of the particular entity attribute/timeseries \n                    type: type, // type of the dataKey. Can be \"timeseries\", \"attribute\" or \"function\" \n                    label: settings.updateValueKey, // label of the dataKey. Used as display value (for ex. in the widget legend section) \n                    color: '#ffffff', // color of the key. Can be used by widget to set color of the key data (for ex. lines in line chart or segments in the pie chart).  \n                    funcBody: \"\", // only applicable for datasource with type \"function\" and \"function\" key type. Defines body of the function to generate simulated data.\n                    settings: {} // dataKey specific settings with structure according to the defined Data key settings json schema. See \"Settings schema section\".\n               },\n               //...\n           ]\n        },\n        //...\n    ]\n  function subscribeForLabelPatternsSources(datasources) {\n    const labelPatternsSourcesSubscriptionOptions = {\n      datasources,\n      useDashboardTimewindow: false,\n      type: 'latest',\n      callbacks: {\n        onDataUpdated: (subscription) => {\n          console.log(subscription.data[0].data[0][1]);\n          let data = subscription.data[0].data[0][1];\n          \n          let value = (convertGetValue(data)); \n          console.log(value);           \n                       if (value === true)\n                       {\n                           console.log (\"check\");\n                       dg.check()\n                       \n                       }\n                        else\n                        {\n                        dg.uncheck();\n                        console.log (\"uncheck\");\n                        \n                        }\n        }\n      }\n    };\n    \n    self.ctx.subscriptionApi.createSubscription(labelPatternsSourcesSubscriptionOptions, true).subscribe(\n      (subscription) => {\n        //this.labelPatternsSourcesSubscription = subscription;\n      }\n    );\n  }\nsubscribeForLabelPatternsSources(datasources);\n}\n\n    if (settings.retrieveValueMethod == 'Call RPC get value method')\n    {\n        requestStatus()\n    }\n    self.onResize();\n}\n    \n\n\n\nself.onResize = function() {\n\n    $('.on-off-switch', self.ctx.$container)[0].style.zoom = self.ctx.width/450;\n\n\n    if (parseInt($('.on-off-switch', self.ctx.$container)[0].style.height) > self.ctx.height)\n    $('.on-off-switch', self.ctx.$container)[0].style.zoom = self.ctx.height/180;\n    \n  //  $('#on-off-switch', self.ctx.$container)[0].style.marginLeft = self.ctx.width - $('.checkbox-container', self.ctx.$container)[0].offsetWidth + \"px\";\n  \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"retrieveValueMethod\":\n            {\n                \"title\": \"Retrieve on/off value using method\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Don't retrieve\",\n                                \"Call RPC get value method\",\n                                \"Subscribe for attribute\",\n                                \"Subscribe for timeseries\"],\n                            \"default\": \"Call RPC get value method\"\n            },\n            \"updateValueKey\": {\n                \"title\": \"Attribute/Timeseries value key (only when subscribe for attribute/timeseries method)\",\n                \"type\": \"string\",\n                \"default\": \"value\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"backgroundcolorOn\": {\n                \"title\": \"Background Color On\",\n                \"type\": \"string\",\n                \"default\": \"#6AFD8A\"\n            },\n            \"backgroundcolorOff\": {\n                \"title\": \"Background Color Off\",\n                \"type\": \"string\",\n                \"default\": \"#666\"\n            },\n            \"textColorOn\": {\n                \"title\": \"Text Color On\",\n                \"type\": \"string\",\n                \"default\": \"#fff\"\n            },\n            \"textColorOff\": {\n                \"title\": \"Text Color Off\",\n                \"type\": \"string\",\n                \"default\": \"#fff\"\n            },\n            \"height\": {\n                \"title\": \"Height in px\",\n                \"type\": \"number\",\n                \"default\": 150\n            },\n            \"textOn\": {\n                \"title\": \"Escotilla abierta\",\n                \"type\": \"string\",\n                \"default\": \"ABIERTA\"\n            },\n            \"textOff\": {\n                \"title\": \"Escotilla cerrada\",\n                \"type\": \"string\",\n                \"default\": \"CERRADA\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            },\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n            \n        },\n        \"required\": [ \n                    \"retrieveValueMethod\",\n                     \"statusRequestMethod\",\n                     \"changeRequestMethod\",\n                     \"convertStatusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"requestTimeout\",\n                     \"backgroundcolorOn\",\n                     \"backgroundcolorOff\",\n                     \"textColorOn\",\n                     \"textColorOff\",\n                     \"height\",\n                     \"textOn\",\n                     \"textOn\"]\n    },\n    \"form\": [\n        \"retrieveValueMethod\",\n        \"updateValueKey\",\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\",\n        {\n            \"key\": \"backgroundcolorOn\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"backgroundcolorOff\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"textColorOn\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"textColorOff\",\n            \"type\": \"color\"\n        },\n        \"height\",\n        \"textOn\",\n        \"textOff\"\n            ]\n        \n    \n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Switch-Abierta-Cerrada\"}"
      }
    },
    {
      "alias": "gauge_1",
      "name": "Gauge-CO2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 8,
        "resources": [
          {
            "url": "https://www.gstatic.com/charts/loader.js"
          }
        ],
        "templateHtml": "\r\n       <div id=\"chart_div\"></div>",
        "templateCss": "\n#container{\n\n}\n\n#chart_div {\n\n      display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n \n}",
        "controllerScript": "var data;\nvar options;\nvar chart;\nself.onInit = function() {\n    var settings = self.ctx.settings;\n      google.charts.load('current', {'packages':['gauge']});\n      google.charts.setOnLoadCallback(drawChart);\n\n      function drawChart() {\n\n        data = google.visualization.arrayToDataTable([\n          ['Label', 'Value'],\n          [settings.description || \"CO2\", 0]\n        ]);\n\n        options = {\n          width: self.ctx.width, height: self.ctx.height,\n          min: settings.minValue || 0, max: settings.maxValue,\n          greenFrom: settings.greenStart, greenTo: settings.greenEnd,\n          redFrom: settings.redStart, redTo: settings.redEnd,\n          yellowFrom:settings.yellowStart, yellowTo: settings.yellowEnd,\n          minorTicks: 5\n        };\n\n        chart = new google.visualization.Gauge($('#chart_div', self.ctx.$container)[0]);\n\n        chart.draw(data, options);\n        \n        self.onDataUpdated();\n\n        \n      }\n}\n\nself.onDataUpdated = function() {\n    var settings = self.ctx.settings;\n    var value = 0;\n    console.log (self.ctx);\n    \n    if (self.ctx.data.length > 0)\n    {\n        \n        if (self.ctx.data[0].data.length > 0)\n        value = self.ctx.data[0].data[0][1];\n        console.log (value);\n\n      \n        }\n    \n        \n        if (data !=undefined)\n        {\n            console.log (value);\n            data.setValue(0, 1, value);\n            chart.draw(data, options);\n        }\n}\n\nself.onResize = function() {\n    //if (options != undefined)\n    //{\n    //options.width = self.ctx.width;\n    //options.height = self.ctx.height;\n    //}\n    //$('#chart_div', self.ctx.$container)[0].style.marginLeft = -200 + self.ctx.width/2 + \"px\";\n    \n    \n    //if (chart != undefined)\n   //chart.draw(data, options);\n   self.onInit();\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"description\": {\n                \"title\": \"Description\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"greenStart\": {\n                \"title\": \"Start green area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"greenEnd\": {\n                \"title\": \"End green area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yellowStart\": {\n                \"title\": \"Start Yellow area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yellowEnd\": {\n                \"title\": \"End Yellow area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"redStart\": {\n                \"title\": \"Start Red area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"redEnd\": {\n                \"title\": \"End Red area\",\n                \"type\": \"number\",\n                \"default\": 0\n            }\n            \n        },\n        \"required\": [\"maxValue\"]\n    },\n    \"form\": [\n        \"description\",\n        \"maxValue\",\n        \"minValue\",\n        \"greenStart\",\n        \"greenEnd\",\n        \"yellowStart\",\n        \"yellowEnd\",\n        \"redStart\",\n        \"redEnd\"\n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = Math.random() * 100;\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Gauge-CO2\"}"
      }
    },
    {
      "alias": "static",
      "name": "Change Dashboard State",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 2.5,
        "resources": [],
        "templateHtml": "<div id=\"changeDashboardState\">\n<span id=\"dashboardStateLabel\">Change Dashboard State</span>\n<select id=\"dashboardState\" name=\"dashboardState\">\n     \n    </select>\n    </div>",
        "templateCss": "#changeDashboardState {\n\nwidth: 100%;\n    top: 50%;\n    text-align: center;\n    position: absolute;\n}\n\n#dashboardState\n{\n    margin-left: 5px;\n}",
        "controllerScript": "self.onInit = function() {\n  \n    var settings = self.ctx.settings;\n    //set Font size of select\n    $('#dashboardState', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    //set Font size of label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    \n    //set Font color of Select\n    $('#dashboardState', self.ctx.$container)[0].style.color = settings.fontColor;\n    //set Font color of Label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.color = settings.fontColor;\n    \n    //set Label Text according to settings\n    $('#dashboardStateLabel', self.ctx.$container)[0].innerHTML = settings.labelText;\n    \n  \n    //Add Options to the Select\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        $('#dashboardState', self.ctx.$container).append($('<option>', {\n                    text: settings.dashboardStateList[i].listEntry\n                }));\n    }\n    \n    \n    //Select changed\n    $('#dashboardState', self.ctx.$container).change(function() {\n    var listEntry = ('#dashboardState', self.ctx.$container).find(\":selected\").text()\n    console.log(\"list Entry:\" + listEntry)\n    \n    //Get Alias for the given name\n    var alias = settings.dashboardStateList[0].dashboardAlias;\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        if (settings.dashboardStateList[i].listEntry == listEntry)\n        {\n            alias = settings.dashboardStateList[i].dashboardAlias;\n            break;\n        }\n    }\n    \n  var selection = alias;\n\n  var stateController = self.ctx.stateController;\n  var stateID = stateController.getStateId();\n  var params = stateController.getStateParams();\n\n  var entityId = (getEntityID(selection));\n \n  params.entityName = selection;\n  params.entityId.id = entityId;\n  \n    \nstateController.resetState();\n  stateController.updateState(stateID=stateID, params=params, true);\n  \n  \n});\n\n\nfunction getEntityID (alias)\n{\n    var aliases = self.ctx.dashboard.aliasController.entityAliases;\n   for (let element in aliases)\n   {\n       \n        if (aliases[element].alias == alias)\n            return aliases[element].filter.singleEntity.id;\n   }\n        \n}\n    \n\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \n            \"fontSize\": {\n                \"title\": \"Font size\",\n                \"type\": \"number\",\n                \"default\": 16\n            },\n            \"fontColor\": {\n                \"title\": \"Font color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"labelText\": {\n                \"title\": \"Label Text\",\n                \"type\": \"string\",\n                \"default\": \"Change Dashboard State\"\n            },\n            \"dashboardStateList\": {\n                \"title\": \"Dashboard State list\",\n                \"type\": \"array\",\n                \"minItems\" : 1,\n                \"items\": {\n                    \"title\": \"Dashboard State\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"dashboardAlias\": {\n                            \"title\": \"Dashboard Alias\",\n                            \"type\": \"string\"\n                        },\n                        \"listEntry\": {\n                            \"title\": \"List Entry\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"dashboardAlias\", \"listEntry\"]\n                }\n            }\n            },\n        \"required\": [\"dashboardStateList\"]\n    },\n    \"form\": [\n        \"fontSize\",\n        \"fontColor\",\n        \"labelText\",\n        \"dashboardStateList\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"dashboardStateList\":[{\"name\":\"test\",\"dashboardAlias\":\"CAG1D1\",\"listEntry\":\"Device 1\"}],\"fontSize\":16,\"fontColor\":\"#008a00\",\"labelText\":\"Change Dashboard State\"},\"title\":\"Change Dashboard State\",\"dropShadow\":true}"
      }
    }
  ]
}